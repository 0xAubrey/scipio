{"version":3,"sources":["components/usd-chart.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["convertData","json","Object","keys","map","key","data","x","time","y","parseFloat","amount_usd","toFixed","UsdChart","state","hasErrors","fetch","then","res","setState","catch","this","constructorType","highcharts","Highcharts","options","chart","type","title","text","plotOptions","line","turboThreshold","series","name","xAxis","yAxis","credits","href","React","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"gQAOMA,EAAc,SAACC,GACnB,OAAOC,OAAOC,KAAKF,GAAMG,KAAI,SAACC,GAC5B,IAAMC,EAAkBL,EAAKI,GAC7B,MAAO,CACLE,EAAe,IAAZD,EAAKE,KACRC,EAAGC,WAAWJ,EAAKK,WAAWC,QAAQ,SAwC/BC,EAAb,4MACEC,MAAQ,CACNC,WAAW,EACXT,KAAM,IAHV,kEAMuB,IAAD,OAIhBU,MAAM,gDACHC,MAAK,SAACC,GAAD,OAASA,EAAIjB,UAClBgB,MAAK,SAACC,GAAD,OAAS,EAAKC,SAAS,CAAEb,KAAMN,EAAYkB,QAChDE,OAAM,kBAAM,EAAKD,SAAS,CAAEJ,WAAW,SAbhD,+BAkBI,OACE,2BACGM,KAAKP,MAAMC,UACV,sFAEA,gBAAC,IAAD,CACEO,gBAAiB,aACjBC,WAAYC,IACZC,SA5DVnB,EA4D8Be,KAAKP,MAAMR,KA3DjB,CACxBoB,MAAO,CACLC,KAAM,UAERC,MAAO,CACLC,KAAM,kDAERC,YAAa,CACXC,KAAM,CACJC,eAAgB,IAGpBC,OAAQ,CACN,CACEC,KAAM,MACNP,KAAM,OACNrB,KAAMA,IAGV6B,MAAO,CACLR,KAAM,YAERS,MAAO,CACLR,MAAO,CACLC,KAAM,QAGVQ,QAAS,CACPC,KAAM,+CACNT,KAAM,6DA/BS,IACjBvB,MAkCF,GAA8BiC,aCvCfC,MARf,WACE,OACE,yBAAKC,UAAU,iBACb,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdpC,OAAM,SAAAqC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.93bb9537.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { mockData, DataPoint, DataSet } from \"./mock-data\";\nimport Highcharts from \"highcharts/highstock\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nconst USE_MOCK_DATA = false;\n\nconst convertData = (json: DataSet): Highcharts.PointOptionsObject[] => {\n  return Object.keys(json).map((key: string) => {\n    const data: DataPoint = json[key];\n    return {\n      x: data.time * 1000,\n      y: parseFloat(data.amount_usd.toFixed(2)),\n    };\n  });\n};\n\nconst getOptions = (\n  data: Highcharts.PointOptionsObject[]\n): Highcharts.Options => ({\n  chart: {\n    type: \"spline\",\n  },\n  title: {\n    text: \"1-minute agent consensus portfolio value (USD)\",\n  },\n  plotOptions: {\n    line: {\n      turboThreshold: 0,\n    },\n  },\n  series: [\n    {\n      name: \"USD\",\n      type: \"line\",\n      data: data,\n    },\n  ],\n  xAxis: {\n    type: \"datetime\",\n  },\n  yAxis: {\n    title: {\n      text: \"USD\",\n    },\n  },\n  credits: {\n    href: \"https://cb1minmvp.firebaseio.com/trades.json\",\n    text: \"Source: https://cb1minmvp.firebaseio.com/trades.json\",\n  },\n});\n\nexport class UsdChart extends React.Component {\n  state = {\n    hasErrors: false,\n    data: [],\n  };\n\n  componentDidMount() {\n    if (USE_MOCK_DATA) {\n      this.setState({ data: convertData(mockData) });\n    } else {\n      fetch(\"https://cb1minmvp.firebaseio.com/trades.json\")\n        .then((res) => res.json())\n        .then((res) => this.setState({ data: convertData(res) }))\n        .catch(() => this.setState({ hasErrors: true }));\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.hasErrors ? (\n          <div>An error occured fetching data. See console for output.</div>\n        ) : (\n          <HighchartsReact\n            constructorType={\"stockChart\"}\n            highcharts={Highcharts}\n            options={getOptions(this.state.data)}\n          />\n        )}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { UsdChart } from \"./components/usd-chart\";\n\nfunction App() {\n  return (\n    <div className=\"app-container\">\n      <UsdChart />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}